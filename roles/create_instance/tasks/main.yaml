---
# vim:ft=ansible:
- name: Check if Google Cloud SDK is installed
  command: gcloud version
  register: gcloud_installed
  changed_when: false
  ignore_errors: yes

- fail:
    msg: "Please make sure Google Cloud SDK is installed before executing the role."
  when: gcloud_installed | failed

- name: Check if instances are created
  command: "gcloud compute instances list --filter='name:{{ basic_config.name }}' --format='value(status)'"
  register: instance_created
  changed_when: false
  ignore_errors: yes

- name: Set instance names
  debug:
    msg: "{{ basic_config.name }}-{{ '%03d'|format(item|int) }}"
  register: instance_names
  with_sequence:
    - "start=1 end={{ basic_config.instances_count }}"
  when: instance_created.stdout == ""

- name: Create instance on google cloud platform
  command: >
    gcloud compute instances create
    {{ hostvars.localhost.instance_names.results | map(attribute='msg') | list | join(' ') }}
    --boot-disk-size="{{basic_config.boot_disk_size}}"
    --boot-disk-type="{{ basic_config.boot_disk_type }}"
    --image-family="{{ basic_config.image_family }}"
    --image-project="{{ basic_config.image_project }}"
    --machine-type="{{ basic_config.machine_type }}"
    "{{ basic_config.can_ip_forward}}"
    --zone="{{ basic_config.zone }}"
    --metadata-from-file ssh-keys={{ basic_config.ssh_private_key_file }}
    --tags="{{ basic_config.tags }}"
  changed_when: false
  when: instance_created.stdout == ""

- name: Start instance if it's on TERMINATED status
  command: gcloud compute instances start "{{ basic_config.name }}"
  changed_when: false
  when: instance_created.stdout == "TERMINATED"

- name: Get metadata about instacnes
  command: gcloud compute instances list --filter='name:{{ basic_config.name }}' --format="value[separator=','](name, networkInterfaces[0].networkIP, networkInterfaces[0].accessConfigs[0].natIP)"
  register: instances_metadata
  ignore_errors: yes

- debug: msg="{{ instances_metadata.stdout }}"
- name: "Generate {{ inventory_output_file }}"
  template:
    src: inventory.ini.j2
    dest: "{{ inventory_output_file }}"
